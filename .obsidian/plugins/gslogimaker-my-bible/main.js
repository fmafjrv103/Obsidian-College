/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyBible
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/async-mutex/index.mjs
var E_TIMEOUT = new Error("timeout while waiting for mutex to become available");
var E_ALREADY_LOCKED = new Error("mutex already locked");
var E_CANCELED = new Error("request for lock canceled");
var __awaiter$2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Semaphore = class {
  constructor(_value, _cancelError = E_CANCELED) {
    this._value = _value;
    this._cancelError = _cancelError;
    this._weightedQueues = [];
    this._weightedWaiters = [];
  }
  acquire(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve, reject) => {
      if (!this._weightedQueues[weight - 1])
        this._weightedQueues[weight - 1] = [];
      this._weightedQueues[weight - 1].push({ resolve, reject });
      this._dispatch();
    });
  }
  runExclusive(callback, weight = 1) {
    return __awaiter$2(this, void 0, void 0, function* () {
      const [value, release] = yield this.acquire(weight);
      try {
        return yield callback(value);
      } finally {
        release();
      }
    });
  }
  waitForUnlock(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve) => {
      if (!this._weightedWaiters[weight - 1])
        this._weightedWaiters[weight - 1] = [];
      this._weightedWaiters[weight - 1].push(resolve);
      this._dispatch();
    });
  }
  isLocked() {
    return this._value <= 0;
  }
  getValue() {
    return this._value;
  }
  setValue(value) {
    this._value = value;
    this._dispatch();
  }
  release(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    this._value += weight;
    this._dispatch();
  }
  cancel() {
    this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));
    this._weightedQueues = [];
  }
  _dispatch() {
    var _a;
    for (let weight = this._value; weight > 0; weight--) {
      const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
      if (!queueEntry)
        continue;
      const previousValue = this._value;
      const previousWeight = weight;
      this._value -= weight;
      weight = this._value + 1;
      queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
    }
    this._drainUnlockWaiters();
  }
  _newReleaser(weight) {
    let called = false;
    return () => {
      if (called)
        return;
      called = true;
      this.release(weight);
    };
  }
  _drainUnlockWaiters() {
    for (let weight = this._value; weight > 0; weight--) {
      if (!this._weightedWaiters[weight - 1])
        continue;
      this._weightedWaiters[weight - 1].forEach((waiter) => waiter());
      this._weightedWaiters[weight - 1] = [];
    }
  }
};
var __awaiter$1 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Mutex = class {
  constructor(cancelError) {
    this._semaphore = new Semaphore(1, cancelError);
  }
  acquire() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const [, releaser] = yield this._semaphore.acquire();
      return releaser;
    });
  }
  runExclusive(callback) {
    return this._semaphore.runExclusive(() => callback());
  }
  isLocked() {
    return this._semaphore.isLocked();
  }
  waitForUnlock() {
    return this._semaphore.waitForUnlock();
  }
  release() {
    if (this._semaphore.isLocked())
      this._semaphore.release();
  }
  cancel() {
    return this._semaphore.cancel();
  }
};

// main.ts
var BUILD_START_TOAST = "Bible build started!";
var BUILD_END_TOAST = "Bible build finished!";
var DEFAULT_SETTINGS = {
  translation: "",
  bible_folder: "/Bible/",
  book_name_format: "{order} {book}",
  book_name_delimiter: " ",
  chapter_name_format: "{order} {book} {chapter}",
  book_name_capitalization: "name_case",
  book_name_abbreviated: false,
  padded_order: true,
  padded_chapter: false,
  build_with_dynamic_verses: true,
  verse_body_format: "###### {verse}\n{verse_text}",
  chapter_body_format: "\n###### [[{first_chapter_name}|{book} 1 \u23EE]] | [[{last_chapter_name}|{last_chapter_book} {last_chapter} \u25C0]] | [[{book}]] | [[{next_chapter_name}|\u25B6 {next_chapter_book} {next_chapter}]] | [[{final_chapter_name}|\u23ED {book} {final_chapter}|]]\n\n{verses}\n\n###### [[{first_chapter_name}|{book} 1 \u23EE]] | [[{last_chapter_name}|{last_chapter_book} {last_chapter} \u25C0]] | [[{book}]] | [[{next_chapter_name}|\u25B6 {next_chapter_book} {next_chapter}]] | [[{final_chapter_name}|\u23ED {book} {final_chapter}|]]\n\n",
  store_locally: false,
  _built_translation: "",
  set_translation: async function(val, plugin) {
    let has_translation = false;
    let translations = await plugin.bible_api.get_translations();
    if (!(val in translations)) {
      this.translation = await plugin.bible_api.get_default_translation();
    } else {
      this.translation = val;
    }
  }
};
function httpGet(theUrl) {
  return new Promise(async (ok, err) => {
    ok(await (0, import_obsidian.requestUrl)(theUrl).text);
  });
}
function is_alpha(string) {
  for (let char_str of string) {
    let char = char_str.charCodeAt(0);
    if (char > 64 && char < 91 || char > 96 && char < 123 || char > 39 && char < 42) {
      continue;
    }
    return false;
  }
  return true;
}
function is_alphanumeric(string) {
  for (let char_str of string) {
    let char = char_str.charCodeAt(0);
    if (char > 64 && char < 91 || char > 96 && char < 123 || char > 47 && char < 58) {
      continue;
    }
    return false;
  }
  return true;
}
function is_numeric(string) {
  for (let char_str of string) {
    let char = char_str.charCodeAt(0);
    if (char > 47 && char < 58) {
      continue;
    }
    return false;
  }
  return true;
}
var MyBible = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.bible_api = new BollsLifeBibleAPI();
    this.bible_api.plugin = this;
    await this.settings.set_translation(this.settings.translation, this);
    this.addCommand({
      id: "create_bible_files",
      name: "Build bible",
      callback: async () => {
        let bible_path = (0, import_obsidian.normalizePath)(this.settings.bible_folder);
        let bible_folder = this.app.vault.getAbstractFileByPath(bible_path);
        if (bible_folder instanceof import_obsidian.TFile) {
          new ErrorModal(
            this.app,
            this,
            "Failed to build bible",
            'The bible folder defined in settings, "{0}", was expected to point to a folder, but it points to a file. Try changing the path to point to a folder, or change the file to a folder.'.format(this.settings.bible_folder)
          ).open();
          return;
        } else if (bible_folder === null) {
          this.app.vault.adapter.mkdir(bible_path);
        } else {
        }
        let folders_and_files = await this.app.vault.adapter.list(bible_path);
        if (folders_and_files.files.length + folders_and_files.folders.length != 0) {
          new ClearOldBibleFilesModal(this.app, this).open();
        } else {
          new import_obsidian.Notice(BUILD_START_TOAST);
          await this.build_bible(bible_path);
          new import_obsidian.Notice(BUILD_END_TOAST);
        }
      }
    });
    this.addCommand({
      id: "clear_cache",
      name: "Clear cache",
      callback: async () => {
        new ClearCacheFilesModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "download_bible",
      name: "Download translation",
      callback: async () => {
        new DownloadBibleModal(
          this.app,
          this
        ).open();
      }
    });
    this.registerMarkdownCodeBlockProcessor("verse", async (source, element, context) => {
      const ref = source.trim().replace(/[:-]/g, " ").split(" ");
      let book = null;
      let book_id = -1;
      let chapter = -1;
      let verse = -1;
      let verse_end = -1;
      let maybe_translation = null;
      let i = 0;
      while (i != ref.length) {
        if (i == 0) {
          book = (book || "") + ref[i];
        } else {
          if (!is_alpha(ref[i])) {
            break;
          }
          book += " " + ref[i];
        }
        i += 1;
      }
      if (is_numeric(book || "")) {
        book_id = Number(book);
        book = null;
      }
      if (i != ref.length && is_numeric(ref[i])) {
        chapter = Number(ref[i]);
        i += 1;
      }
      if (i != ref.length && is_numeric(ref[i])) {
        verse = Number(ref[i]);
        i += 1;
      }
      if (i != ref.length && is_numeric(ref[i])) {
        verse_end = Number(ref[i]);
        i += 1;
      }
      if (i != ref.length && is_alphanumeric(ref[i])) {
        maybe_translation = ref[i];
        i += 1;
      }
      let translation = maybe_translation || this.settings.translation;
      if (book !== null) {
        book_id = await this.bible_api.book_id(this.settings._built_translation || translation, book);
      }
      book = (await this.bible_api.get_book(translation, book_id)).name;
      let text = "";
      if (book.length === 0) {
        text = "[Book and chapter must be provided]";
      } else if (chapter === -1) {
        text = "[Chapter must be provided]";
      } else if (verse === -1) {
        let verses = await this.bible_api.get_chapter_cached(
          translation,
          book_id,
          chapter
        );
        for (let verse_i of verses.keys()) {
          let verse2 = verses[verse_i];
          text += "<sup>" + (verse_i + 1) + "</sup> " + verse2;
          if (verse_i != verses.length - 1) {
            text += "<br>";
          }
        }
        if (text.length === 0) {
          text = "[Could not find text for the book '{1}', translation '{2}', chapter {0}]".format(String(chapter), book, translation);
        }
      } else if (verse_end < verse) {
        text = await this.bible_api.get_verse(
          translation,
          book_id,
          chapter,
          verse
        );
        if (text.length === 0) {
          text = "[Could not find text for the book '{1}', translation '{3}', chapter {0}, verse {2}]".format(String(chapter), book, String(verse), translation);
        }
      } else {
        let verses = await this.bible_api.get_chapter_cached(
          translation,
          book_id,
          chapter
        );
        let j = verse;
        while (j < verse_end + 1 && j < verses.length) {
          text += "<sup>" + j + "</sup> " + verses[j - 1];
          if (j != verse_end) {
            text += "<br>";
          }
          j += 1;
        }
        if (text.length === 0) {
          text = "[Could not find text for the book '{1}', translation '{4}', chapter {0}, verses {2}-{3}]".format(String(chapter), book, String(verse), String(verse_end), translation);
        }
      }
      let span = element.createSpan({
        text: ""
      });
      let tags = text.matchAll(
        /(?:<\s*([\w]*)\s*>(.*?)<\s*\/\1\s*>)|<\s*(br|\/br|br\/)\s*>|(.+?(?:(?=<\s*[/\\\w]*\s*>)|$))/gs
      );
      for (let match of tags) {
        let tag_type = match[1];
        let tag_text = match[2];
        let lone_tag_type = match[3];
        let normal_text = match[4];
        if (normal_text !== void 0) {
          span.createSpan({
            text: normal_text
          });
        } else if (lone_tag_type === "br") {
          span.createEl(lone_tag_type);
        } else if (lone_tag_type === "br/" || lone_tag_type === "/br") {
          span.createEl("br");
          span.createSpan({
            text: "\n"
          });
        } else if (lone_tag_type === "/J") {
        } else if (tag_type === "sup") {
          span.createEl(tag_type, { text: tag_text });
        } else if (tag_type === "sub") {
          span.createEl(tag_type, { text: tag_text });
        } else if (tag_type === "S") {
          span.createEl(
            "sub",
            { text: tag_text, attr: { style: "opacity: 0.5" } }
          );
        } else if (tag_type === "i") {
          span.createEl(tag_type, { text: tag_text });
        } else if (tag_type === "b") {
          span.createEl(tag_type, { text: tag_text });
        } else if (tag_type === "e") {
          span.createEl("i").createEl("q", { text: tag_text });
        } else {
          span.createSpan(
            { text: "<{0}>{1}</{0}>".format(tag_type, tag_text) }
          );
        }
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  onunload() {
  }
  async build_bible(bible_path) {
    this.settings._built_translation = this.settings.translation;
    await this.saveSettings();
    let ctx = new BuildContext();
    ctx.translation = this.settings._built_translation;
    ctx.books = await this.bible_api.get_books(
      this.settings._built_translation
    );
    ctx.verse_counts = await this.bible_api.get_verse_count(ctx.translation);
    if (!this.settings.build_with_dynamic_verses) {
      ctx.translation_texts = await this.bible_api.get_translation(ctx.translation);
    }
    for (let book of ctx.books) {
      ctx.set_book(book.id);
      let book_path = bible_path;
      if (this.settings.book_name_format.length != 0) {
        book_path += "/" + ctx.format_book_name(this, ctx.book, this.settings.book_name_capitalization);
        this.app.vault.adapter.mkdir((0, import_obsidian.normalizePath)(book_path));
      }
      let file_promises = [];
      for (const chapter_i of Array(ctx.book.chapters).keys()) {
        ctx.set_chapter(chapter_i + 1);
        ctx.verses_text = "";
        let verse = 1;
        while (verse != ctx.get_verse_count() + 1) {
          ctx.verse = verse;
          ctx.verses_text += ctx.format_verse_body(
            this,
            this.settings.build_with_dynamic_verses
          );
          if (verse != ctx.get_verse_count()) {
            ctx.verses_text += "\n";
          }
          verse += 1;
        }
        let chapter_note_name = ctx.format_chapter_name(this);
        let note_body = ctx.format_chapter_body(this);
        let file_path = (0, import_obsidian.normalizePath)(book_path + "/" + chapter_note_name + ".md");
        let file = this.app.vault.getAbstractFileByPath(file_path);
        if (file instanceof import_obsidian.TFile) {
          file_promises.push(this.app.vault.modify(file, note_body));
        } else if (file === null) {
          file_promises.push(
            this.app.vault.create(
              file_path,
              note_body
            )
          );
        }
      }
      await Promise.all(file_promises);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BuildContext = class {
  find_book(book_id) {
    for (let i of this.books.keys()) {
      if (this.books[i].id === book_id) {
        return i;
      }
    }
    throw new Error("No book by id ${book_id}");
  }
  abbreviate_book_name(name) {
    return name.replace(" ", "").slice(0, 3);
  }
  format_book_name(plugin, book, casing) {
    let delim = plugin.settings.book_name_delimiter;
    let book_name = this.to_case(book.name, casing, delim);
    if (plugin.settings.book_name_abbreviated) {
      book_name = this.abbreviate_book_name(book_name);
    }
    return plugin.settings.book_name_format.replace(
      /{order}/g,
      String(book.id).padStart(2 * Number(plugin.settings.padded_order), "0")
    ).replace(/{book}/g, book_name);
  }
  format_book_name_without_order(plugin, book, casing) {
    let delim = plugin.settings.book_name_delimiter;
    let book_name = this.to_case(book.name, casing, delim);
    if (plugin.settings.book_name_abbreviated) {
      book_name = this.abbreviate_book_name(book_name);
    }
    return book_name;
  }
  format_chapter_body(plugin) {
    let casing = plugin.settings.book_name_capitalization;
    return plugin.settings.chapter_body_format.replace(/{verses}/g, this.verses_text).replace(/{book}/g, this.format_book_name_without_order(plugin, this.book, casing)).replace(
      /{order}/g,
      String(this.book.id).padStart(2 * Number(plugin.settings.padded_order), "0")
    ).replace(/{chapter}/g, String(this.chapter)).replace(/{chapter_name}/g, this.format_chapter_name(plugin)).replace(/{last_chapter}/g, String(this.last_chapter)).replace(/{last_chapter_name}/g, this.format_chapter_name(plugin, "last")).replace(/{last_chapter_book}/g, this.format_book_name_without_order(plugin, this.last_book, casing)).replace(/{next_chapter}/g, String(this.next_chapter)).replace(/{next_chapter_name}/g, this.format_chapter_name(plugin, "next")).replace(/{next_chapter_book}/g, this.format_book_name_without_order(plugin, this.next_book, casing)).replace(/{first_chapter}/g, "1").replace(/{first_chapter_name}/g, this.format_chapter_name(plugin, "first")).replace(/{final_chapter}/g, String(this.book.chapters)).replace(/{final_chapter_name}/g, this.format_chapter_name(plugin, "final"));
  }
  format_chapter_name(plugin, tense = "current") {
    let format = plugin.settings.chapter_name_format;
    if (format.length == 0) {
      format = DEFAULT_SETTINGS.chapter_name_format;
    }
    let pad_by = 3;
    if (this.get_verse_count() < 10) {
      pad_by = 1;
    } else if (this.get_verse_count() < 100) {
      pad_by = 2;
    }
    let casing = plugin.settings.book_name_capitalization;
    let delim = plugin.settings.book_name_delimiter;
    let book_name = "";
    let chapter = -1;
    switch (tense) {
      case "current": {
        book_name = this.format_book_name_without_order(plugin, this.book, casing);
        chapter = this.chapter;
        break;
      }
      case "last": {
        book_name = this.format_book_name_without_order(plugin, this.last_book, casing);
        chapter = this.last_chapter;
        break;
      }
      case "next": {
        book_name = this.format_book_name_without_order(plugin, this.next_book, casing);
        chapter = this.next_chapter;
        break;
      }
      case "first": {
        book_name = this.format_book_name_without_order(plugin, this.book, casing);
        chapter = 1;
        break;
      }
      case "final": {
        book_name = this.format_book_name_without_order(plugin, this.book, casing);
        chapter = this.book.chapters;
        break;
      }
      default:
        throw new Error("Unmatched switch case at tense '{0}'".format(tense));
    }
    return format.replace(/{book}/g, book_name).replace(
      /{order}/g,
      String(this.book.id).padStart(2 * Number(plugin.settings.padded_order), "0")
    ).replace(
      /{chapter}/g,
      String(chapter).padStart(pad_by * Number(plugin.settings.padded_chapter), "0")
    );
  }
  format_verse_body(plugin, build_with_dynamic_verses) {
    let book_name = this.format_book_name_without_order(
      plugin,
      this.book,
      "current"
    );
    let verse_text = "";
    if (build_with_dynamic_verses) {
      verse_text = "``` verse\n{book_id} {chapter} {verse} \n```";
    } else {
      verse_text = this.translation_texts.books[this.book.id][this.chapter - 1][this.verse - 1];
    }
    return plugin.settings.verse_body_format.replace(/{verse_text}/g, verse_text).replace(/{verse}/g, String(this.verse)).replace(/{book}/g, book_name).replace(/{book_id}/g, String(this.book.id)).replace(
      /{order}/g,
      String(this.book.id).padStart(2 * Number(plugin.settings.padded_order), "0")
    ).replace(/{chapter}/g, String(this.chapter)).replace(/{chapter_name}/g, this.format_chapter_name(plugin)).replace(/{final_chapter}/g, String(this.book.chapters));
  }
  set_book(book_id) {
    let book_i = this.find_book(book_id);
    this.book = this.books[book_i];
    let last_book_i = this.chapter !== 1 ? book_i : book_i - 1;
    if (last_book_i === -1) {
      last_book_i = this.books.length - 1;
    }
    this.last_book = this.books[last_book_i];
    let next_book_i = this.chapter !== this.book.chapters ? book_i : book_i + 1;
    if (next_book_i === this.books.length) {
      next_book_i = 0;
    }
    this.next_book = this.books[next_book_i];
  }
  set_chapter(chapter) {
    this.chapter = chapter;
    this.set_book(this.book.id);
    this.last_chapter = chapter !== 1 ? chapter - 1 : this.last_book.chapters;
    this.next_chapter = chapter !== this.book.chapters ? chapter + 1 : 1;
  }
  // Sets the capitalization of the given name depending on *name_case*.
  to_case(name, name_case, delimeter) {
    if (name_case == "lower_case") {
      return name.toLowerCase().replace(/ /g, delimeter);
    } else if (name_case == "upper_case") {
      return name.toUpperCase().replace(/ /g, delimeter);
    }
    return name.replace(/ /g, delimeter);
  }
  get_verse_count() {
    return this.verse_counts.get_count_for(this.book.id, this.chapter);
  }
};
var VerseCounts = class {
  get_count_for(book, chapter) {
    return this.books[book][chapter];
  }
};
var BibleAPI = class {
  constructor() {
    this.book_cache = {};
    this.cache_clear_timer = null;
    this.chapter_cache = {};
  }
  async cache_chapter(translation, book_id, chapter, chapter_data, save_locally) {
    let key = this.make_chapter_key(translation, book_id, chapter);
    this.chapter_cache[key] = {
      translation,
      book_id,
      chapter,
      chapter_data,
      mutex: new Mutex()
    };
    if (save_locally) {
      let cache_path = this.get_cache_path();
      this.plugin.app.vault.adapter.mkdir(cache_path);
      let cached_file_name = "{0} {1} {2}.txt".format(translation, String(book_id), String(chapter));
      let cached_file_path = (0, import_obsidian.normalizePath)(
        cache_path + "/" + cached_file_name
      );
      if (chapter_data != null && !await this.plugin.app.vault.adapter.exists(cached_file_path)) {
        let body = "";
        for (let i of chapter_data.keys()) {
          body += chapter_data[i];
          if (i !== chapter_data.length - 1) {
            body += "\n";
          }
        }
        await this.plugin.app.vault.adapter.write(
          cached_file_path,
          body
        );
      }
    }
    if (this.cache_clear_timer !== null && this.cache_clear_timer_promise_err !== null) {
      this.cache_clear_timer_promise_err(null);
    }
    this.cache_clear_timer = new Promise((ok, err) => {
      this.cache_clear_timer_promise_err = err;
      setTimeout(ok, 6e4 * 60);
    });
    this.cache_clear_timer.then(() => this.clear_cache()).catch((err) => {
    });
  }
  async clear_cache() {
    this.chapter_cache = {};
    this.cache_clear_timer = null;
    let cache_path = this.get_cache_path();
    if (await this.plugin.app.vault.adapter.exists(cache_path)) {
      if (!await this.plugin.app.vault.adapter.trashSystem(cache_path)) {
        await this.plugin.app.vault.adapter.trashLocal(cache_path);
      }
    }
  }
  async book_id(translation, book_name) {
    let books = await this.get_books(translation);
    for (let i of books.keys()) {
      if (books[i].name === book_name) {
        return books[i].id;
      }
    }
    if (book_name in DEFAULT_NAME_MAP) {
      return DEFAULT_NAME_MAP[book_name];
    }
    throw new Error(
      "Translation '{0}' has no book named '{1}'".format(translation, book_name)
    );
  }
  async get_translation(translation) {
    throw new Error("unimplemented");
  }
  async get_book(translation, book_id) {
    let book_key = "{0} {1}".format(translation, String(book_id));
    if (!(book_key in this.book_cache)) {
      this.book_cache[book_key] = {
        book_id,
        translation,
        data: null,
        mutex: new Mutex()
      };
    }
    let cached = this.book_cache[book_key];
    if (cached.data === null) {
      await cached.mutex.acquire().then(async () => {
        cached.data = await this._get_book(translation, book_id);
        cached.mutex.cancel();
        cached.mutex.release();
      }).catch((err) => {
        if (err === E_CANCELED) {
        } else {
          throw new Error(err);
        }
      });
    }
    if (cached.data == null) {
      throw new Error();
    }
    return cached.data;
  }
  async _get_book(translation, book_id) {
    throw new Error("unimplemented");
  }
  get_books(translation) {
    throw new Error("unimplemented");
  }
  get_cache_path() {
    return (0, import_obsidian.normalizePath)(this.plugin.manifest.dir + "/.mybiblecache");
  }
  async get_chapter_cached(translation, book_id, chapter) {
    let chapter_key = this.make_chapter_key(translation, book_id, chapter);
    if (!(chapter_key in this.chapter_cache)) {
      this.cache_chapter(
        translation,
        book_id,
        chapter,
        null,
        false
      );
    }
    let cached = this.chapter_cache[chapter_key];
    if (cached.chapter_data === null) {
      await cached.mutex.acquire().then(async () => {
        if (this.plugin.settings.store_locally) {
          let cached_file_name = "{0} {1} {2}.txt".format(translation, String(book_id), String(chapter));
          let cache_path = this.get_cache_path();
          this.plugin.app.vault.adapter.mkdir(cache_path);
          let cached_file_path = (0, import_obsidian.normalizePath)(
            cache_path + "/" + cached_file_name
          );
          if (await this.plugin.app.vault.adapter.exists(cached_file_path)) {
            let raw = await this.plugin.app.vault.adapter.read(cached_file_path);
            if (raw.startsWith("[")) {
              cached.chapter_data = JSON.parse(raw);
            } else {
              cached.chapter_data = raw.split("\n");
            }
          }
        }
        if (cached.chapter_data === null) {
          cached.chapter_data = await this.get_chapter_uncached(
            translation,
            book_id,
            chapter
          );
        }
        cached.mutex.cancel();
        cached.mutex.release();
      }).catch((err) => {
        if (err === E_CANCELED) {
        } else {
          throw new Error(err);
        }
      });
    }
    if (cached.chapter_data === null || cached.chapter_data.length == 0) {
      return [];
    }
    await this.cache_chapter(
      translation,
      book_id,
      chapter,
      cached.chapter_data,
      this.plugin.settings.store_locally
    );
    return cached.chapter_data;
  }
  async get_chapter_uncached(translation, book_id, chapter) {
    throw new Error("unimplemented");
  }
  async get_default_translation() {
    throw new Error("unimplemented");
  }
  get_translations() {
    throw new Error("unimplemented");
  }
  get_verse(translation, book_id, chapter, verse) {
    throw new Error("unimplemented");
  }
  async get_verse_count(translation) {
    throw new Error("unimplemented");
  }
  make_chapter_key(translation, book_id, chapter) {
    return "{0}.{1}.{2}".format(translation, String(book_id), String(chapter));
  }
};
var BollsLifeBibleAPI = class extends BibleAPI {
  constructor() {
    super(...arguments);
    this.chapter_cache = {};
    this.translations = {};
    this.translation_maps = {};
    this.cache_clear_timer = null;
    this.book_mutex = new Mutex();
  }
  _chapter_key(translation, book_id, chapter) {
    return "{0}.{1}.{2}".format(translation, String(book_id), String(chapter));
  }
  async _generate_translation_map(translation) {
    let map = await (0, import_obsidian.requestUrl)(
      "https://bolls.life/get-books/{0}/".format(translation)
    ).json;
    let book_data = [];
    for (let item of map) {
      book_data.push({
        name: item["name"],
        chapters: item["chapters"],
        id: item["bookid"]
      });
    }
    this.translation_maps[translation] = book_data;
  }
  async _book_to_id(translation, book) {
    let book_ = book.toLowerCase();
    let map = await this._get_translation_map("YLT");
    for (let i in map) {
      let book_data = map[i];
      if (book_ == book_data["name"].toLowerCase()) {
        return Number(i) + 1;
      }
    }
    throw new Error("No book exists by name {0}.".format(book));
  }
  async _id_to_book(translation, book_id) {
    let map = await this._get_translation_map("YLT");
    return map[book_id - 1]["name"];
  }
  async get_chapter_uncached(translation, book_id, chapter) {
    try {
      let chapter_data = JSON.parse(await httpGet(
        "https://bolls.life/get-chapter/{0}/{1}/{2}/".format(translation, String(book_id), String(chapter))
      )).map((x) => x.text);
      return chapter_data;
    } catch (e) {
      if (e instanceof Error && e.message.startsWith("No book exists by name")) {
        return [];
      }
      throw e;
    }
  }
  async _get_translation_map(translation) {
    if (!(translation in this.translation_maps)) {
      await this._generate_translation_map(translation);
    }
    return this.translation_maps[translation];
  }
  async get_translation(translation) {
    let verses = JSON.parse(
      await httpGet(
        "https://bolls.life/static/translations/{0}.json".format(translation)
      )
    );
    let bible = {
      translation,
      books: {}
    };
    await new Promise(async (ok, err) => {
      let i = 0;
      let curr_book_id = -1;
      let curr_chapter = -1;
      while (i != verses.length) {
        let verse_json = verses[i];
        if (curr_book_id != verse_json["book"]) {
          curr_book_id = verse_json["book"];
          bible.books[curr_book_id] = [];
          curr_chapter = -1;
        }
        if (curr_chapter != verse_json["chapter"]) {
          curr_chapter = verse_json["chapter"];
          let book_data = bible.books[curr_book_id];
          book_data.push([]);
        }
        bible.books[curr_book_id][curr_chapter - 1].push(verse_json["text"]);
        i += 1;
      }
      ok(null);
    });
    return bible;
  }
  async _get_book(translation, book_id) {
    let books = await this.get_books(translation);
    for (let book of books) {
      if (book.id == book_id) {
        this.book_mutex.cancel();
        this.book_mutex.release();
        return book;
      }
    }
    throw new Error();
  }
  async get_books(translation) {
    let books = await this._get_translation_map(translation);
    books.sort(function(x, y) {
      if (x.id < y.id) {
        return -1;
      }
      if (x.id > y.id) {
        return 1;
      }
      return 0;
    });
    return books;
  }
  async get_default_translation() {
    return "YLT";
  }
  async get_translations() {
    if (Object.keys(this.translations).length === 0) {
      let list = JSON.parse(await httpGet(
        "https://bolls.life/static/bolls/app/views/languages.json"
      ));
      for (let language of list) {
        for (let item of language["translations"]) {
          if (item["short_name"] in this.translations) {
            throw new Error("Translation already added to map");
          }
          this.translations[item["short_name"]] = {
            abbreviated_name: item["short_name"],
            display_name: item["full_name"],
            language: language["language"]
          };
        }
      }
    }
    return this.translations;
  }
  async get_verse(translation, book_id, chapter, verse) {
    let chapter_data = await this.get_chapter_cached(
      translation,
      book_id,
      chapter
    );
    return chapter_data[verse - 1] || "";
  }
  async get_verse_count(translation) {
    let json = JSON.parse(await httpGet(
      "https://bolls.life/get-verse-counts/{0}/".format(translation)
    ));
    let counts = new VerseCounts();
    counts.books = json;
    return counts;
  }
};
var ErrorModal = class extends import_obsidian.Modal {
  constructor(app, plugin, title, body) {
    super(app);
    this.plugin = plugin;
    this.title = title;
    this.body = body;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: this.title });
    contentEl.createEl("span", { text: this.body });
    contentEl.createEl("p", {});
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Close").onClick(() => {
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ClearCacheFilesModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    let bible_path = this.plugin.settings.bible_folder;
    contentEl.createEl("h1", { text: "Clear cache?" });
    contentEl.createEl("span", {
      text: "You are about to clear out all cached chapters from your file system. This includes translations you manually downloaded.".format(bible_path)
    });
    contentEl.createEl("p", {
      text: "Do you want to clear the cache?"
    });
    contentEl.createEl("p", {});
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Cancel").onClick(() => {
        this.close();
      })
    ).addButton(
      (btn) => btn.setButtonText("Clear cache").setCta().onClick(async () => {
        this.close();
        await this.plugin.bible_api.clear_cache();
        new import_obsidian.Notice("Cache cleared!");
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ClearOldBibleFilesModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    let bible_path = this.plugin.settings.bible_folder;
    contentEl.createEl("h1", { text: "Bible folder is not empty" });
    contentEl.createEl("span", {
      text: "The Bible folder in your settings is not empty. If you built a Bible in this folder before the new bible may be interlaced with the old one.".format(bible_path)
    });
    contentEl.createEl("p", {
      text: "Do you want to clear the folder before building your Bible?"
    });
    contentEl.createEl("p", {});
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Cancel").onClick(() => {
        this.close();
      })
    ).addButton(
      (btn) => btn.setButtonText("Build without clearing").setCta().onClick(async () => {
        this.close();
        new import_obsidian.Notice(BUILD_START_TOAST);
        await this.plugin.build_bible(bible_path);
        new import_obsidian.Notice(BUILD_END_TOAST);
      })
    ).addButton(
      (btn) => btn.setButtonText("Clear and build").setCta().onClick(async () => {
        this.close();
        new import_obsidian.Notice(BUILD_START_TOAST);
        let list = await this.app.vault.adapter.list(bible_path);
        for (let path of list.files) {
          let abstract = this.app.vault.getAbstractFileByPath(
            path
          );
          if (abstract != null) {
            await this.app.vault.delete(abstract, true);
          }
        }
        for (let path of list.folders) {
          let abstract = this.app.vault.getAbstractFileByPath(
            path
          );
          if (abstract != null) {
            await this.app.vault.delete(abstract, true);
          }
        }
        await this.plugin.build_bible(bible_path);
        new import_obsidian.Notice(BUILD_END_TOAST);
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DownloadBibleModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    let translation = this.plugin.settings.translation;
    contentEl.createEl("h1", { text: "Download bible?" });
    contentEl.createEl("span", {
      text: "You are about to download the entire {0} translation of the Bible, according to your settings.".format(translation)
    });
    contentEl.createEl("p", {
      text: "Do you want to continue?"
    });
    contentEl.createEl("p", {});
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Cancel").onClick(() => {
        this.close();
      })
    ).addButton(
      (btn) => btn.setButtonText("Download").setCta().onClick(() => {
        this.close();
        this.downloadBible(translation);
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async downloadBible(translation) {
    new import_obsidian.Notice(
      "Started download of the {0} translation!".format(translation)
    );
    let bible = await this.plugin.bible_api.get_translation(translation);
    for (const book_id in bible.books) {
      for (let chapter of Array(bible.books[book_id].length).keys()) {
        await this.plugin.bible_api.cache_chapter(
          translation,
          Number(book_id),
          chapter + 1,
          bible.books[book_id][chapter],
          true
        );
      }
    }
    new import_obsidian.Notice(
      "Completed download of the {0} translation!".format(translation)
    );
  }
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Translation").setDesc("The version of the Bible to display.").addDropdown(async (drop) => {
      let translations = await this.plugin.bible_api.get_translations();
      for (const key in translations) {
        drop.addOption(
          key,
          "{0} - {1} - {2}".format(
            translations[key].language,
            key,
            translations[key].display_name
          )
        );
      }
      drop.onChange(async (value) => {
        this.plugin.settings.translation = value;
        await this.plugin.saveSettings();
      });
      drop.setValue(this.plugin.settings.translation);
    });
    new import_obsidian.Setting(containerEl).setName("Bible folder").setDesc("A path to the folder where all the files for the bible will be placed. If the path does not exist it will be created.").addText(
      (text) => text.setPlaceholder("Example: " + DEFAULT_SETTINGS.bible_folder).setValue(this.plugin.settings.bible_folder).onChange(async (value) => {
        this.plugin.settings.bible_folder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setHeading().setName("Book Formatting");
    new import_obsidian.Setting(containerEl).setName("Book name capitalization").setDesc("Capitalization for the names of the notes of each book.").addDropdown(
      (drop) => drop.addOption("lower_case", "Lower case").addOption("name_case", "Name case").addOption("upper_case", "Upper case").setValue(this.plugin.settings.book_name_capitalization).onChange(async (value) => {
        this.plugin.settings.book_name_capitalization = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Abbreviate book names").setDesc('Abbreviates book names to three letters so that, for example, "Genesis" becomes "Gen" and "1 Kings" becomes "1Ki". (May cause issues in some languages)').addToggle((toggle) => toggle.setValue(this.plugin.settings.book_name_abbreviated).onChange(async (value) => {
      this.plugin.settings.book_name_abbreviated = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Padded order numbers").setDesc('When ON, changes "{order}" in the names of book folders to be padded with extra zeros. For example, "1 Genesis" would become "01 Gensis" when turned ON.').addToggle((toggle) => toggle.setValue(this.plugin.settings.padded_order).onChange(async (value) => {
      this.plugin.settings.padded_order = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Book name delimiter").setDesc('The characters separating words in book names, such as the spaces in "1 John" or "Song of Solomon".').addText((text) => text.setPlaceholder('Example: "' + DEFAULT_SETTINGS.book_name_format + '"').setValue(this.plugin.settings.book_name_delimiter).onChange(async (value) => {
      this.plugin.settings.book_name_delimiter = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Book name format").setDesc('Formatting for the names of the folders of each book of the bible. For example, "{order} {name}" would become "2 Exodus". Leave blank to not have folders for each book.').addText((text) => text.setPlaceholder("Example: " + DEFAULT_SETTINGS.book_name_format).setValue(this.plugin.settings.book_name_format).onChange(async (value) => {
      this.plugin.settings.book_name_format = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setHeading().setName("Chapter Formatting");
    new import_obsidian.Setting(containerEl).setName("Padded chapter numbers").setDesc('When ON, changes "{chapter}" (and related) in the names of chapters to be padded with extra zeros. For example, "Psalms 5" would become "Psalms 005" when turned ON.').addToggle((toggle) => toggle.setValue(this.plugin.settings.padded_chapter).onChange(async (value) => {
      this.plugin.settings.padded_chapter = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Chapter name format").setDesc('Formatting for the names of the notes of each chapter of a book. For example, "{book} {chapter}" would become "Psalms 23.md".').addText((text) => text.setPlaceholder(this.plugin.settings.chapter_name_format).setValue(this.plugin.settings.chapter_name_format).onChange(async (value) => {
      this.plugin.settings.chapter_name_format = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Chapter body format").setDesc("Formatting for the body of chapter notes.").addTextArea((text) => text.setPlaceholder("Example: " + DEFAULT_SETTINGS.chapter_body_format).setValue(this.plugin.settings.chapter_body_format).onChange(async (value) => {
      this.plugin.settings.chapter_body_format = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setHeading().setName("Verse Formatting");
    new import_obsidian.Setting(containerEl).setName("Build with dynamic verses").setDesc("When ON, the text of verses will be saved as verse references that are loaded as you read it. When OFF, saves the text for your current translation into the built files.").addToggle((toggle) => toggle.setValue(this.plugin.settings.build_with_dynamic_verses).onChange(async (value) => {
      this.plugin.settings.build_with_dynamic_verses = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Verse body format").setDesc("Formatting for the body of verses in chapters.").addTextArea((text) => text.setPlaceholder("Example: " + DEFAULT_SETTINGS.verse_body_format).setValue(this.plugin.settings.verse_body_format).onChange(async (value) => {
      this.plugin.settings.verse_body_format = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setHeading().setName("Data");
    new import_obsidian.Setting(containerEl).setName("Save bible locally").setDesc("When ON, caches viewed chapters on the local file system, so that they can be accessed without an internet connection.").addToggle((toggle) => toggle.setValue(this.plugin.settings.store_locally).onChange(async (value) => {
      this.plugin.settings.store_locally = value;
      await this.plugin.saveSettings();
    }));
  }
};
var DEFAULT_NAME_MAP = {
  "Genesis": 1,
  "Exodus": 2,
  "Leviticus": 3,
  "Numbers": 4,
  "Deuteronomy": 5,
  "Joshua": 6,
  "Judges": 7,
  "Ruth": 8,
  "1 Samuel": 9,
  "2 Samuel": 10,
  "1 Kings": 11,
  "2 Kings": 12,
  "1 Chronicles": 13,
  "2 Chronicles": 14,
  "Ezra": 15,
  "Nehemiah": 16,
  "Esther": 17,
  "Job": 18,
  "Psalms": 19,
  "Psalm": 19,
  // Alternate spelling
  "Proverbs": 20,
  "Ecclesiastes": 21,
  "Song of Solomon": 22,
  "Isaiah": 23,
  "Jeremiah": 24,
  "Lamentations": 25,
  "Ezekiel": 26,
  "Daniel": 27,
  "Hosea": 28,
  "Joel": 29,
  "Amos": 30,
  "Obadiah": 31,
  "Jonah": 32,
  "Micah": 33,
  "Nahum": 34,
  "Habakkuk": 35,
  "Zephaniah": 36,
  "Haggai": 37,
  "Zechariah": 38,
  "Malachi": 39,
  "Matthew": 40,
  "Mark": 41,
  "Luke": 42,
  "John": 43,
  "Acts": 44,
  "Romans": 45,
  "1 Corinthians": 46,
  "2 Corinthians": 47,
  "Galatians": 48,
  "Ephesians": 49,
  "Philippians": 50,
  "Colossians": 51,
  "1 Thessalonians": 52,
  "2 Thessalonians": 53,
  "1 Timothy": 54,
  "2 Timothy": 55,
  "Titus": 56,
  "Philemon": 57,
  "Hebrews": 58,
  "James": 59,
  "1 Peter": 60,
  "2 Peter": 61,
  "1 John": 62,
  "2 John": 63,
  "3 John": 64,
  "Jude": 65,
  "Revelation": 66,
  "1 Esdras": 67,
  "Tobit": 68,
  "Judith": 69,
  "Wisdom": 70,
  "Sirach": 71,
  "Epistle of Jeremiah": 72,
  "Baruch": 73,
  "1 Maccabees": 74,
  "2 Maccabees": 75,
  "2 Esdras": 77,
  // Jump in number
  "Susanna": 78,
  "Bel and Dragon": 79,
  "Prayer of Manasseh": 83,
  // Jump in number
  "Azariah": 88
  // Jump in number
};
//# sourceMappingURL=data:application/json;base64,
